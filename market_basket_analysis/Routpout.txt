library(arules)
> library(arulesViz)
> retail_transaction <- read.transactions("products.csv",sep=",")
Message d'avis :
Dans asMethod(object) : removing duplicated items in transactions
> summary(retail_transaction)
transactions as itemMatrix in sparse format with
 30000 rows (elements/itemsets/transactions) and
 81 columns (items) and a density of 0.03650576 

most frequent items:
 Toothpaste Garden Hose     Sponges   Deodorant      Butter     (Other) 
       2029        1147        1147        1137        1136       82113 

element (itemset/transaction) length distribution:
sizes
   1    2    3    4    5 
5991 6213 6165 6358 5273 

   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   2.000   3.000   2.957   4.000   5.000 

includes extended item information - examples:
         labels
1 Air Freshener
2         Apple
3    Baby Wipes
> itemFrequency(retail_transaction[,1:3])
Air Freshener         Apple    Baby Wipes 
   0.03626667    0.03506667    0.03553333 
> itemFrequencyPlot(retail_transaction, topN = 20)
> image(retail_transaction[1:5])
> image(sample(retail_transaction, 100))
> ru1=apriori(retail_transaction)
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target  ext
        0.8    0.1    1 none FALSE            TRUE       5     0.1      1     10  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 3000 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[81 item(s), 30000 transaction(s)] done [0.02s].
sorting and recoding items ... [0 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 done [0.00s].
writing ... [0 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].
> itemsrules <- apriori(retail_transaction, parameter = list(support =0.0019, confidence = 0.04, minlen = 2))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target  ext
       0.04    0.1    1 none FALSE            TRUE       5  0.0019      2     10  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 57 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[81 item(s), 30000 transaction(s)] done [0.02s].
sorting and recoding items ... [81 item(s)] done [0.00s].
creating transaction tree ... done [0.02s].
checking subsets of size 1 2 done [0.00s].
writing ... [69 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].
> itemsrules
set of 69 rules 
> summary(itemsrules)
set of 69 rules

rule length distribution (lhs + rhs):sizes
 2 
69 

   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      2       2       2       2       2       2 

summary of quality measures:
    support           confidence         coverage            lift            count      
 Min.   :0.001933   Min.   :0.05254   Min.   :0.03380   Min.   :0.7768   Min.   :58.00  
 1st Qu.:0.002033   1st Qu.:0.05699   1st Qu.:0.03567   1st Qu.:0.8426   1st Qu.:61.00  
 Median :0.002233   Median :0.06126   Median :0.03623   Median :0.9058   Median :67.00  
 Mean   :0.002236   Mean   :0.06171   Mean   :0.03624   Mean   :0.9124   Mean   :67.09  
 3rd Qu.:0.002333   3rd Qu.:0.06472   3rd Qu.:0.03683   3rd Qu.:0.9570   3rd Qu.:70.00  
 Max.   :0.002700   Max.   :0.07714   Max.   :0.03823   Max.   :1.1406   Max.   :81.00  

mining info:
               data ntransactions support confidence
 retail_transaction         30000  0.0019       0.04
                                                                                                  call
 apriori(data = retail_transaction, parameter = list(support = 0.0019, confidence = 0.04, minlen = 2))
> inspect(itemsrules[1:3])
    lhs              rhs          support     confidence coverage   lift      count
[1] {Canned Soup} => {Toothpaste} 0.002300000 0.06804734 0.03380000 1.0061213 69   
[2] {Coffee}      => {Toothpaste} 0.001933333 0.05625606 0.03436667 0.8317801 58   
[3] {Iron}        => {Toothpaste} 0.002300000 0.06764706 0.03400000 1.0002029 69   
> rules=itemsrules
> plot(rules)
To reduce overplotting, jitter is added! Use jitter = 0 to prevent jitter.
> plot(rules, measure = c("support", "lift"), shading = "confidence")
To reduce overplotting, jitter is added! Use jitter = 0 to prevent jitter.
> subrules2 <- head(rules, n = 10, by = "lift")
> plot(subrules2, method = "graph")
> plot(subrules2, method = "paracoord")
> plot(subrules2, method = "graph", engine = "htmlwidget")